.w-100 {
  width: 100%;
}

.d-flex {
  display: flex;
}

.flex-wrap {
  flex-wrap: wrap;
}

.flex-column {
  flex-direction: column;
}

.jc-center {
  justify-content: center;
}

.jc-flex-end {
  justify-content: flex-end;
}

.jc-flex-start {
  justify-content: flex-start;
}

.ai-flex-end {
  align-items: flex-end;
}

.flex-grow-column {
  display: flex;
  flex-direction: column;
  flex-grow: 1;
}

.hidden {
  display: none;
}

.ai-flex-start {
  align-items: flex-start;
}

.mat-form-field-appearance-legacy .mat-form-field-underline {
  display: none;
}

.mat-chip.mat-standard-chip {
  background: rgba(196, 196, 196, 0.2) !important;
}

.mat-form-field-appearance-legacy .mat-form-field-wrapper {
  padding: 0 0 0 10px !important;
}

.cursor-pointer {
  cursor: pointer;
}

.jc-space-between {
  justify-content: space-between;
}

.ai-center {
  align-items: center;
}

.ai-end {
  align-items: flex-end;
}

.ai-start {
  align-items: flex-start;
}

.w-fill {
  width: 100%;
}

.h-fill {
  height: 100%;
}

.position-relative {
  position: relative;
}

.position-absolute {
  position: absolute;
}

.auto-grow {
  flex-grow: 1;
}

.white-container {
  background: #ffffff;
  border-radius: 10px;
}

.black-container {
  background: #000000;
  border-radius: 10px;
}

.nowrap {
  text-overflow: ellipsis;
  white-space: nowrap;
  overflow: hidden;
}

.absolute-vertical-alignment {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}

.m-a {
  margin: auto;
}

.m-r-a {
  margin-right: auto;
}

.m-l-a {
  margin-left: auto;
}

.m-t-a {
  margin-top: auto;
}

.m-b-a {
  margin-bottom: auto;
}

$margin-names: m-l, m-r, m-t, m-b, m;
$width-value: w;

$width: (
  0,
  4,
  8,
  12,
  13,
  14,
  15,
  16,
  20,
  22,
  24,
  25,
  30,
  32,
  34,
  36,
  40,
  44,
  45,
  50,
  60,
  65,
  70,
  80,
  100,
  105,
  110,
  120,
  124,
  130,
  140,
  150,
  153,
  160,
  170,
  175,
  200,
  210,
  220,
  230,
  240,
  250,
  260,
  263,
  270,
  280,
  290,
  300,
  320,
  350,
  370,
  380,
  410,
  450,
  487,
  520,
  540,
  555,
  570,
  610,
  800
);

$margins: (
  m-l: margin-left,
  m-r: margin-right,
  m-t: margin-top,
  m-b: margin-bottom,
  m: margin,
);

@each $value in $width {
  .width-#{$value} {
    width: #{$value}px !important;
  }
  .percent-width-#{$value} {
    width: $value * 1% !important;
  }
  .max-width-#{$value} {
    max-width: #{$value}px !important;
  }
  .min-width-#{$value} {
    min-width: #{$value}px !important;
  }
}

@each $margin in $margin-names {
  @for $i from 0 through 40 {
    $j: $i * 5;
    $margin-name: map-get($margins, $margin);

    .#{$margin}-#{$j} {
      #{$margin-name}: $i * 5px !important;
    }
  }
}

$padding-names: p-l, p-r, p-t, p-b, p-y, p-x, p;

$paddings: (
  p-l: (
    padding-left,
  ),
  p-r: (
    padding-right,
  ),
  p-t: (
    padding-top,
  ),
  p-b: (
    padding-bottom,
  ),
  p-y: (
    padding-top,
    padding-bottom,
  ),
  p-x: (
    padding-left,
    padding-right,
  ),
  p: (
    padding,
  ),
);

@each $padding in $padding-names {
  @for $i from 0 through 40 {
    $j: $i * 5;
    $padding-name: map-get($paddings, $padding);

    .#{$padding}-#{$j} {
      @each $name in $padding-name {
        #{$name}: $i * 5px !important;
      }
    }
  }
}
